-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/githubuser/hw5#readme</a>
@package hw5
@version 0.1.0.0

module HW5.Base
data HiError
HiErrorInvalidArgument :: HiError
HiErrorInvalidFunction :: HiError
HiErrorArityMismatch :: HiError
HiErrorDivideByZero :: HiError
data HiExpr
HiExprValue :: HiValue -> HiExpr
HiExprApply :: HiExpr -> [HiExpr] -> HiExpr
HiExprDict :: [(HiExpr, HiExpr)] -> HiExpr
HiExprRun :: HiExpr -> HiExpr
data HiFun
HiFunDiv :: HiFun
HiFunMul :: HiFun
HiFunAdd :: HiFun
HiFunSub :: HiFun
HiFunNot :: HiFun
HiFunAnd :: HiFun
HiFunOr :: HiFun
HiFunLessThan :: HiFun
HiFunGreaterThan :: HiFun
HiFunEquals :: HiFun
HiFunNotLessThan :: HiFun
HiFunNotGreaterThan :: HiFun
HiFunNotEquals :: HiFun
HiFunIf :: HiFun
HiFunLength :: HiFun
HiFunToUpper :: HiFun
HiFunToLower :: HiFun
HiFunReverse :: HiFun
HiFunTrim :: HiFun
HiFunList :: HiFun
HiFunRange :: HiFun
HiFunFold :: HiFun
HiFunPackBytes :: HiFun
HiFunUnpackBytes :: HiFun
HiFunEncodeUtf8 :: HiFun
HiFunDecodeUtf8 :: HiFun
HiFunZip :: HiFun
HiFunUnzip :: HiFun
HiFunSerialise :: HiFun
HiFunDeserialise :: HiFun
HiFunCount :: HiFun
HiFunKeys :: HiFun
HiFunValues :: HiFun
HiFunInvert :: HiFun
HiFunRead :: HiFun
HiFunWrite :: HiFun
HiFunMkDir :: HiFun
HiFunChDir :: HiFun
HiFunParseTime :: HiFun
HiFunRand :: HiFun
HiFunEcho :: HiFun
data HiValue
HiValueBool :: Bool -> HiValue
HiValueNumber :: Rational -> HiValue
HiValueFunction :: HiFun -> HiValue
HiValueNull :: HiValue
HiValueString :: Text -> HiValue
HiValueList :: Seq HiValue -> HiValue
HiValueBytes :: ByteString -> HiValue
HiValueDict :: Map HiValue HiValue -> HiValue
HiValueAction :: HiAction -> HiValue
HiValueTime :: UTCTime -> HiValue
data HiAction
HiActionRead :: FilePath -> HiAction
HiActionWrite :: FilePath -> ByteString -> HiAction
HiActionMkDir :: FilePath -> HiAction
HiActionChDir :: FilePath -> HiAction
HiActionCwd :: HiAction
HiActionNow :: HiAction
HiActionRand :: Int -> Int -> HiAction
HiActionEcho :: Text -> HiAction
class Monad m => HiMonad m
runAction :: HiMonad m => HiAction -> m HiValue
instance GHC.Classes.Ord HW5.Base.HiAction
instance GHC.Classes.Eq HW5.Base.HiAction
instance GHC.Show.Show HW5.Base.HiAction
instance GHC.Generics.Generic HW5.Base.HiAction
instance GHC.Classes.Ord HW5.Base.HiFun
instance GHC.Classes.Eq HW5.Base.HiFun
instance GHC.Show.Show HW5.Base.HiFun
instance GHC.Generics.Generic HW5.Base.HiFun
instance GHC.Classes.Ord HW5.Base.HiValue
instance GHC.Classes.Eq HW5.Base.HiValue
instance GHC.Show.Show HW5.Base.HiValue
instance GHC.Generics.Generic HW5.Base.HiValue
instance Codec.Serialise.Class.Serialise HW5.Base.HiValue
instance Codec.Serialise.Class.Serialise HW5.Base.HiFun
instance Codec.Serialise.Class.Serialise HW5.Base.HiAction

module HW5.Action

-- | Permission to read, write, time
data HiPermission
AllowRead :: HiPermission
AllowWrite :: HiPermission
AllowTime :: HiPermission

-- | Exception if your permission don't allow action permission
data PermissionException
PermissionRequired :: HiPermission -> PermissionException
newtype HIO a
HIO :: (Set HiPermission -> IO a) -> HIO a
[runHIO] :: HIO a -> Set HiPermission -> IO a
instance GHC.Classes.Ord HW5.Action.HiPermission
instance GHC.Classes.Eq HW5.Action.HiPermission
instance GHC.Show.Show HW5.Action.HiPermission
instance GHC.Show.Show HW5.Action.PermissionException
instance GHC.Base.Monad HW5.Action.HIO
instance GHC.Base.Applicative HW5.Action.HIO
instance GHC.Base.Functor HW5.Action.HIO
instance HW5.Base.HiMonad HW5.Action.HIO
instance GHC.Exception.Type.Exception HW5.Action.PermissionException

module HW5.Evaluator

-- | Convert HiExpr to HiValue with HiError
eval :: HiMonad m => HiExpr -> m (Either HiError HiValue)

module HW5.Parser

-- | Terms pS -&gt; pE | Infix pE pE -&gt; (pValue | ( pS ) | pDict) pE'
--   pDict -&gt; { pDictValue, ... , pDictValue } pDictValue -&gt; pS : pS
--   pE' -&gt; (! | !E' | .word)pE' | eps pValue -&gt; pBytes | pNumber |
--   pFun | pBool | pText | pNull | pAction
parse :: String -> Either (ParseErrorBundle String Void) HiExpr

module HW5.Pretty

-- | Pretty print HiValue
prettyValue :: HiValue -> Doc AnsiStyle
