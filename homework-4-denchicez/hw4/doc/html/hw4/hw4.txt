-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/githubuser/hw4#readme</a>
@package hw4
@version 0.1.0.0


-- | This module contains the types from hw3 that are also needed for hw4.
module HW4.Types
data Annotated e a
(:#) :: a -> e -> Annotated e a
data Except e a
Error :: e -> Except e a
Success :: a -> Except e a
data Expr
Val :: Double -> Expr
Op :: Prim Expr -> Expr
data Prim a
Add :: a -> a -> Prim a
Sub :: a -> a -> Prim a
Mul :: a -> a -> Prim a
Div :: a -> a -> Prim a
Abs :: a -> Prim a
Sgn :: a -> Prim a
data State s a
S :: (s -> Annotated s a) -> State s a
[runS] :: State s a -> s -> Annotated s a
instance (GHC.Show.Show e, GHC.Show.Show a) => GHC.Show.Show (HW4.Types.Except e a)
instance (GHC.Show.Show a, GHC.Show.Show e) => GHC.Show.Show (HW4.Types.Annotated e a)
instance GHC.Show.Show a => GHC.Show.Show (HW4.Types.Prim a)
instance GHC.Show.Show HW4.Types.Expr
instance GHC.Num.Num HW4.Types.Expr
instance GHC.Real.Fractional HW4.Types.Expr

module HW4.T1
data EvaluationError
DivideByZero :: EvaluationError
data ExceptState e s a
ES :: (s -> Except e (Annotated s a)) -> ExceptState e s a
[runES] :: ExceptState e s a -> s -> Except e (Annotated s a)

-- | Convert return type in annotated by given function
mapExceptState :: (a -> b) -> ExceptState e s a -> ExceptState e s b

-- | Return exceptState by given
wrapExceptState :: a -> ExceptState e s a

-- | Return state in return type by given state
joinExceptState :: ExceptState e s (ExceptState e s a) -> ExceptState e s a

-- | Modify annotated state by given function
modifyExceptState :: (s -> s) -> ExceptState e s ()

-- | Return ExceptState which always returns error
throwExceptState :: e -> ExceptState e s a

-- | Calculate given expression to ExceptState which contains final result
--   of evaluating an expression, it accumulates a trace of all individual
--   operations
eval :: Expr -> ExceptState EvaluationError [Prim Double] Double
instance GHC.Show.Show HW4.T1.EvaluationError
instance GHC.Base.Functor (HW4.T1.ExceptState e s)
instance GHC.Base.Applicative (HW4.T1.ExceptState e s)
instance GHC.Base.Monad (HW4.T1.ExceptState e s)

module HW4.T2
data ParseError
ErrorAtPos :: Natural -> ParseError

-- | Return result by parser of given string
runP :: Parser a -> String -> Except ParseError a

-- | Parser which return if string empty then return error else return
--   first char in string
pChar :: Parser Char

-- | Parser which return always error
parseError :: Parser a

-- | Return result like expression by parsing of given string
--   
--   LL(1) context free grammar view like:
--   
--   pExpr -&gt; pExprE
--   
--   pExprE -&gt; pExprT pExprE'
--   
--   pExprE' -&gt; (+|-) pExprT pExprE' | eps
--   
--   pExprT -&gt; pExprF pExprT'
--   
--   pExprT' -&gt; (*|/) pExprF pExprT' | eps
--   
--   pExprF -&gt; ( pExprE ) | pDouble
parseExpr :: String -> Except ParseError Expr
instance GHC.Show.Show HW4.T2.ParseError
instance GHC.Base.Monad HW4.T2.Parser
instance GHC.Base.Applicative HW4.T2.Parser
instance GHC.Base.Functor HW4.T2.Parser
instance GHC.Base.Alternative HW4.T2.Parser
instance GHC.Base.MonadPlus HW4.T2.Parser
