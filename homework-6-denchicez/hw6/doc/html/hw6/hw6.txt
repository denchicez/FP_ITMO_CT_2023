-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/githubuser/hw6#readme</a>
@package hw6
@version 0.1.0.0


-- | This module defines <a>ListZipper</a> datatype. Feel free to define
--   additional helper functions to work with this datatype in this module.
module Data.ListZipper
data ListZipper a
LZ :: [a] -> a -> [a] -> ListZipper a
lLeft :: ListZipper a -> ListZipper a
lRight :: ListZipper a -> ListZipper a
lGenerator :: (a -> a) -> (a -> a) -> a -> ListZipper a
instance GHC.Base.Functor Data.ListZipper.ListZipper
instance Control.Comonad.Comonad Data.ListZipper.ListZipper


-- | This module defines <a>Grid</a> datatype. Feel free to define
--   additional helper functions to work with this datatype in this module.
module Data.Grid
newtype Grid a
Grid :: ListZipper (ListZipper a) -> Grid a
[unGrid] :: Grid a -> ListZipper (ListZipper a)
instance GHC.Base.Functor Data.Grid.Grid
instance Control.Comonad.Comonad Data.Grid.Grid

module HW6.T1
type BucketsArray stm k v = TArray stm Int (Bucket k v)
data CHT stm k v
CHT :: TVar stm (BucketsArray stm k v) -> TVar stm Int -> CHT stm k v
[chtBuckets] :: CHT stm k v -> TVar stm (BucketsArray stm k v)
[chtSize] :: CHT stm k v -> TVar stm Int

-- | Create new concurrent hash table
newCHT :: MonadConc m => m (CHT (STM m) k v)

-- | Get value by key in concurrent hash table
getCHT :: (MonadConc m, Eq k, Hashable k) => k -> CHT (STM m) k v -> m (Maybe v)

-- | Get value by key in concurrent hash table
putCHT :: (MonadConc m, Eq k, Hashable k) => k -> v -> CHT (STM m) k v -> m ()

-- | Get size of concurrent hash table
sizeCHT :: MonadConc m => CHT (STM m) k v -> m Int

-- | Init capacity of concurrent hash table
initCapacity :: Int

-- | Constant to refactor concurrent hash table
loadFactor :: Double

module HW6.T2
type TSet = [Symbol]

-- | Check if name in set
type family Contains (name :: Symbol) (set :: TSet) :: Bool

-- | Add name to set
type family Add (v :: Symbol) (set :: TSet) :: TSet

-- | Delete name from set
type family Delete (name :: Symbol) (set :: TSet) :: TSet

module HW6.T3
data Config
Config :: Double -> Int -> Int -> Int -> Int -> Int -> Int -> Config
[probability] :: Config -> Double
[incubationPeriod] :: Config -> Int
[illnessDuration] :: Config -> Int
[immunityDuration] :: Config -> Int
[gridSize] :: Config -> Int
[iterations] :: Config -> Int
[seed] :: Config -> Int
data Cell
Cell :: CellState -> StdGen -> Cell
[cellState] :: Cell -> CellState
[cellRand] :: Cell -> StdGen
data CellState
Healthy :: CellState
Infected :: Int -> CellState
Ill :: Int -> CellState
Immune :: Int -> CellState
type Comonad19Grid = Grid Cell

-- | Creates an infinite list of grids using the given configuration. Each
--   element of this list represents one infection simulation step.
--   
--   This function may take additional parameters (e.g. initial seed for
--   random).
simulate :: Config -> [Comonad19Grid]
instance GHC.Show.Show HW6.T3.Config
instance GHC.Show.Show HW6.T3.CellState
instance GHC.Show.Show HW6.T3.Cell
